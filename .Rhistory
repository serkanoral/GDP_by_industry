library(rhino)
library(bea.R)
renv::install("bea.R")
renv::install("xml2")
renv::install("dplyr")
renv::install("echarts4r")
renv::install("readr")
renv::install("tidyr")
renv::install("tibble")
renv::install("stringr")
renv::install("shinyWidgets")
renv::install("shinybusy")
# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.
library(rhino)
library(bea.R)
library(xml2)
library(dplyr)
library(echarts4r)
library(readr)
library(tidyr)
library(tibble)
library(stringr)
#library(stats)
library(shinyWidgets)
library(shinybusy)
renv::snapshot()
rhino::build_sass()
shiny::runApp()
library(stats)
renv::snapshot()
runApp()
Sys.getenv("API_KEY")
getwd()
runApp()
readRenviron(getwd())
Sys.getenv("API_KEY")
readRenviron(getwd())
Sys.getenv("API_KEY")
Sys.getenv("HOME")
getwd()
Sys.getenv("API_KEY")
readRenviron(getwd())
Sys.getenv("API_KEY")
Sys.getenv("home")
Sys.getenv("HOME")
runApp()
shiny::runApp()
Sys.getenv("API_KEY")
.key = "F38AC32B-7712-420D-A31B-356E6E7281E8"
.key
runApp()
shiny::runApp()
.key = "F38AC32B-7712-420D-A31B-356E6E7281E8"
.key
runApp()
shiny::runApp()
# This file allows packrat (used by rsconnect during deployment) to pick up dependencies.
library(rhino)
library(bea.R)
library(xml2)
library(dplyr)
library(echarts4r)
library(readr)
library(tidyr)
library(tibble)
library(stringr)
library(stats)
library(shinyWidgets)
library(shinybusy)
box::use(app/logic/get_data)
get_data$load_data()
View(get_data)
box::use(app/logic/get_data)
get_data$load_data()
load_data()
rm(get_data)
box::use(bea.R[beaGet], xml2[read_xml, xml_find_all, xml_attr],
tibble[tibble],
dplyr[left_join, select, case_when, mutate, pull],
readr[write_rds], )
# You have to get your own API key and replace with Sys.getenv("HOME"), "/.Renviron"
#' @export
load_data <- function() {
path <- paste0(Sys.getenv("HOME"), "/.Renviron")
readRenviron(path)
bea_specs <- list(
"UserID" = Sys.getenv("API_KEY"),
# Set up API key
"Method" = "GetData",
# Method
"datasetname" = "GDPbyIndustry",
# Specify dataset
"Frequency" = "Q",
# Specify table within the dataset
"Industry" = "ALL",
# Specify the line code
"TableID" = "ALL",
# Specify the geographical level
"Year" = "ALL" # Specify the year
)
# data
data <- beaGet(bea_specs, asWide = FALSE)
# table names
xml_data <-
read_xml(
paste0(
"https://apps.bea.gov/api/data/?&UserID=",
Sys.getenv("API_KEY"),
"&method=GetParameterValues&DataSetName=GDPbyIndustry&ParameterName=TableID&ResultFormat=xml"
)
xml_list <- xml_find_all(xml_data, ".//ParamValue")
TableID <- xml_list |> xml_attr(attr = "Key")
TableName <- xml_list |> xml_attr(attr = "Desc")
table_ <- tibble("TableID" = TableID, "TableName" = TableName)
df <-  data |>
left_join(table_, by = c("TableID" = "TableID")) |>
select(-Frequency,-TableID, -DataValue.1) |>
mutate(Month = case_when(Quarter == "I" ~ 1,
Quarter == "II" ~ 4,
Quarter == "III" ~ 7,
TRUE ~ 10)) |>
mutate(Date = as.Date(paste0(Year, "-", Month, "-", 1))) |>
select(-Year, -Quarter, -NoteRef,-Month,-Industry)
df |> pull(TableName) |>  unique() |> write_rds("app/logic/table_name.rds")
df |> write_rds("app/logic/df.rds")
}
box::use(app/logic/get_data)
get_data$load_data()
View(get_data)
box::use(bea.R[beaGet], xml2[read_xml, xml_find_all, xml_attr],
tibble[tibble],
dplyr[left_join, select, case_when, mutate, pull],
readr[write_rds], )
# You have to get your own API key and replace with Sys.getenv("HOME"), "/.Renviron"
#' @export
load_data <- function() {
path <- paste0(Sys.getenv("HOME"), "/.Renviron")
readRenviron(path)
bea_specs <- list(
"UserID" = Sys.getenv("API_KEY"),
# Set up API key
"Method" = "GetData",
# Method
"datasetname" = "GDPbyIndustry",
# Specify dataset
"Frequency" = "Q",
# Specify table within the dataset
"Industry" = "ALL",
# Specify the line code
"TableID" = "ALL",
# Specify the geographical level
"Year" = "ALL" # Specify the year
)
# data
data <- beaGet(bea_specs, asWide = FALSE)
# table names
xml_data <-
read_xml(
paste0(
"https://apps.bea.gov/api/data/?&UserID=",
Sys.getenv("API_KEY"),
"&method=GetParameterValues&DataSetName=GDPbyIndustry&ParameterName=TableID&ResultFormat=xml"
)
xml_list <- xml_find_all(xml_data, ".//ParamValue")
TableID <- xml_list |> xml_attr(attr = "Key")
TableName <- xml_list |> xml_attr(attr = "Desc")
table_ <- tibble("TableID" = TableID, "TableName" = TableName)
df <-  data |>
left_join(table_, by = c("TableID" = "TableID")) |>
select(-Frequency,-TableID, -DataValue.1) |>
mutate(Month = case_when(Quarter == "I" ~ 1,
Quarter == "II" ~ 4,
Quarter == "III" ~ 7,
TRUE ~ 10)) |>
mutate(Date = as.Date(paste0(Year, "-", Month, "-", 1))) |>
select(-Year, -Quarter, -NoteRef,-Month,-Industry)
return(df)
}
box::use(app/logic/get_data)
get_data$load_data()|>
pull(TableName) |>
unique() |>
write_rds("app/logic/table_name.rds")
get_data$load_data() |>
write_rds("app/logic/df.rds")
runApp()
shiny::runApp()
